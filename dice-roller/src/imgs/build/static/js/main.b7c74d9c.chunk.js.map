{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["dFour","dSix","dEight","dTen","dTwelve","dTwenty","dHundred","Array","keys","Roller","props","state","dice","currentRoll","rollLog","diceImg","totalRoll","sumRoll","rolled","Math","floor","random","length","this","setState","console","log","i","id","onClick","class","roll","clear","slice","reverse","map","src","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","el","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b7c74d9c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Simulate } from \"react-dom/test-utils\";\r\nimport './App.css';\r\n\r\n//establish die paramenters\r\n// const die= [\r\n//   {},\r\n//   {},\r\n//\r\n// ]\r\nconst dFour = [1, 2 , 3 ,4];\r\nconst dSix = [1, 2, 3, 4, 5, 6];\r\nconst dEight = [1, 2, 3, 4, 5, 6, 7, 8];\r\nconst dTen = [1, 2, 3 , 4, 5, 6, 7, 8, 9, 10];\r\nconst dTwelve = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\nconst dTwenty = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 14, 15, 16, 17, 18, 19, 20];\r\nconst dHundred = [...Array(100).keys()];\r\n\r\n\r\n\r\nclass Roller extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dice: dTwenty, // Sets an initial state\r\n            currentRoll: '',\r\n            rollLog: [],\r\n            diceImg: '../src/imgs/d20.png',\r\n            totalRoll: [] ,\r\n            sumRoll: 0\r\n            };\r\n        // this.playSound = this.playSound.bind.this;\r\n        // this.onPress = this.onPress.bind.this;\r\n    };\r\n\r\n   \r\n//random roll withing die parameters\r\n\r\n    roll(dice) {\r\n        var rolled = dice[Math.floor((Math.random() * dice.length))]\r\n\r\n        this.setState(() => {\r\n            return {currentRoll: rolled}\r\n        }); \r\n        this.setState(() => {\r\n            return {rollLog: [ ...this.state.rollLog, rolled]}; \r\n          \r\n        });\r\n         console.log(this.state.rollLog, rolled);\r\n        };\r\n\r\n//dice multiplier\r\ntotalRoll(totalRoll){\r\n    \r\n    this.setState(() => {\r\n        return {totalRoll: [...totalRoll, this.state.currentRoll]};\r\n    });\r\n    \r\n};\r\n\r\n//totalRoll addition\r\n\r\nsumRoll(sumRoll){\r\n    let totalRoll = this.state.totalRoll;\r\n    var sumRoll = 0;\r\n    for( var i = 0; i<= totalRoll.length; i++ ) {\r\n        sumRoll += i;\r\n    }\r\n    return (this.setState.sumRoll);\r\n    \r\n}\r\n\r\n \r\n//clear roll log\r\n\r\n    clear(rollLog) {\r\n        this.setState(() => {\r\n            return {rollLog: [], currentRoll: '', totalRoll: 0};\r\n        })\r\n    }\r\n\r\n//dice img\r\ngetDiceImage(dice){\r\n    if (this.state.dice === dFour)\r\n    return \"../src/imgs/d4.png\";\r\n    if (this.state.dice === dSix)\r\n    return \"../src/imgs/d6.png\";\r\n    if (this.state.dice === dEight)\r\n    return \"./src/imgs/d8.png\";\r\n    if (this.state.dice === dTen)\r\n    return \"./src/imgs/d10.png\";\r\n    if (this.state.dice === dTwelve)\r\n    return \"./src/imgs/d12.png\";    \r\n    if (this.state.dice === dTwenty)\r\n    return \"./src/imgs/d20.png\";\r\n    if (this.state.dice === dHundred)\r\n    return \"./src/imgs/d100.png\";\r\n}\r\n\r\n\r\n//resulting roll display\r\n\r\n    render() {\r\n        const {dice, currentRoll, rollLog, sumRoll} = this.state; // You want to destructure dice and currentRoll from state so you can use it in your render method\r\n\r\n        return (\r\n            <div >\r\n                <div id=\"dieTray\">\r\n                <div>\r\n                    <button id=\"d4\" onClick={() =>\r\n                        this.setState({dice: dFour, diceImg:'./src/imgs/d4.png'})}>\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"d6\" onClick={() =>\r\n                        this.setState({dice: dSix})}>\r\n\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"d8\" onClick={() =>\r\n                        this.setState({dice: dEight})}>\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"d10\" onClick={() =>\r\n                        this.setState({dice: dTen})}>\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"d12\" onClick={() =>\r\n                        this.setState({dice: dTwelve})}> \r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"d20\" onClick={() =>\r\n                        this.setState({dice: dTwenty})}>\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"d100\" onClick={() =>\r\n                        this.setState({dice: dHundred})}>\r\n                    </button>\r\n                </div>\r\n                </div>\r\n                <div>\r\n                <div>\r\n                    <button id=\"rollbtn\" class=\"roll\" onClick={() =>\r\n                        this.roll(dice)}>Roll\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"clearbtn\" class =\"clear\"onClick={() =>\r\n                        this.clear(rollLog)}>clear\r\n                    </button>\r\n                </div>\r\n                </div>\r\n                <div class=\"box\"> \r\n                \r\n               <h2 id=\"rollDisplay\">{currentRoll}</h2>\r\n         \r\n                <ul id=\"rollRecord\" class=\"container\">\r\n                    {rollLog.slice(0).reverse().map(i => (\r\n                    <div class=\"\"> \r\n                    \r\n                   <li id=\"card\">{i} ,{sumRoll} <img src={this.state.diceImg}></img></li>\r\n                     </div>                   \r\n                  ))}\r\n                </ul>\r\n              \r\n                </div> \r\n            </div>   \r\n               \r\n        );\r\n    }\r\n}\r\n\r\nexport default Roller;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport Roller from './App.js';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\nconst el = document.getElementById('dieRoll')\r\n\r\nReactDOM.render(<Roller />, el);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}